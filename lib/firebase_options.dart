// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        return windows;
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static const FirebaseOptions web = FirebaseOptions(
    apiKey: const String.fromEnvironment('FIREBASE_API_KEY_WEB'),
    appId: const String.fromEnvironment('FIREBASE_APP_ID_WEB'),
    messagingSenderId: const String.fromEnvironment('FIREBASE_MESSAGING_SENDER_ID_WEB'),
    projectId: const String.fromEnvironment('FIREBASE_PROJECT_ID_WEB'),
    authDomain: const String.fromEnvironment('FIREBASE_AUTH_DOMAIN_WEB'),
    storageBucket: const String.fromEnvironment('FIREBASE_STORAGE_BUCKET_WEB'),
  );

  static const FirebaseOptions android = FirebaseOptions(
    apiKey: const String.fromEnvironment('FIREBASE_API_KEY_ANDROID'),
    appId: const String.fromEnvironment('FIREBASE_APP_ID_ANDROID'),
    messagingSenderId: const String.fromEnvironment('FIREBASE_MESSAGING_SENDER_ID_ANDROID'),
    projectId: const String.fromEnvironment('FIREBASE_PROJECT_ID_ANDROID'),
    storageBucket: const String.fromEnvironment('FIREBASE_STORAGE_BUCKET_ANDROID'),
  );

  static const FirebaseOptions ios = FirebaseOptions(
    apiKey: const String.fromEnvironment('FIREBASE_API_KEY_IOS'),
    appId: const String.fromEnvironment('FIREBASE_APP_ID_IOS'),
    messagingSenderId: const String.fromEnvironment('FIREBASE_MESSAGING_SENDER_ID_IOS'),
    projectId: const String.fromEnvironment('FIREBASE_PROJECT_ID_IOS'),
    storageBucket: const String.fromEnvironment('FIREBASE_STORAGE_BUCKET_IOS'),
    iosBundleId: const String.fromEnvironment('FIREBASE_IOS_BUNDLE_ID_IOS'),
  );

  static const FirebaseOptions macos = FirebaseOptions(
    apiKey: const String.fromEnvironment('FIREBASE_API_KEY_MACOS'),
    appId: const String.fromEnvironment('FIREBASE_APP_ID_MACOS'),
    messagingSenderId: const String.fromEnvironment('FIREBASE_MESSAGING_SENDER_ID_MACOS'),
    projectId: const String.fromEnvironment('FIREBASE_PROJECT_ID_MACOS'),
    storageBucket: const String.fromEnvironment('FIREBASE_STORAGE_BUCKET_MACOS'),
    iosBundleId: const String.fromEnvironment('FIREBASE_IOS_BUNDLE_ID_MACOS'),
  );

  static const FirebaseOptions windows = FirebaseOptions(
    apiKey: const String.fromEnvironment('FIREBASE_API_KEY_WINDOWS'),
    appId: const String.fromEnvironment('FIREBASE_APP_ID_WINDOWS'),
    messagingSenderId: const String.fromEnvironment('FIREBASE_MESSAGING_SENDER_ID_WINDOWS'),
    projectId: const String.fromEnvironment('FIREBASE_PROJECT_ID_WINDOWS'),
    authDomain: const String.fromEnvironment('FIREBASE_AUTH_DOMAIN_WINDOWS'),
    storageBucket: const String.fromEnvironment('FIREBASE_STORAGE_BUCKET_WINDOWS'),
  );

}